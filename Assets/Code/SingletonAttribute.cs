using System;
using System.Collections.Generic;
using System.IO;
using UnityEditor;
using UnityEngine;

/// <summary>
/// Tag singletons automatically adding it to the Windows->Singletons menu list 
/// which allows you to select it in the Inspector.
/// 
/// Note, this generates a class automatically after a recomple is detected, but 
/// only if there was a change.
/// 
/// <see cref="SingletonTemplate)"/>
/// </summary>
[AttributeUsage(AttributeTargets.Class)]
public class SingletonAttribute : Attribute
{
#if UNITY_EDITOR

	const string GENERATED_CLASS_NAME = "GeneratedSingletonsMenu";

	/// <summary>
	/// Unity calls this method after the scripts have finished compiling.
	/// Note: I'm pretty sure it is called after all the serializable objects
	/// have been rejuvinated.
	/// </summary>
	[UnityEditor.Callbacks.DidReloadScripts]
	private static void OnReloadScripts()
	{
		string filePath = string.Format("{0}/Code/Generated/{1}.cs", Application.dataPath, GENERATED_CLASS_NAME);

		// Make sure the directory exists first
		Directory.CreateDirectory(Path.GetDirectoryName(filePath));

		string currentClass = File.Exists(filePath) ? File.ReadAllText(filePath) : String.Empty;
		string newClass = GenerateClass();

		if (currentClass != newClass)
		{
			File.Delete(filePath);
			File.WriteAllText(filePath, newClass, System.Text.Encoding.UTF8);

			AssetDatabase.ImportAsset(string.Format("Code/Generated/{0}.cs", GENERATED_CLASS_NAME));
		}
	}

	/// <summary>
	/// Creates the text for the generated class that has the actual 
	/// MenuItems.
	/// </summary>
	/// <returns>Text for the generated class</returns>
	public static string GenerateClass()
	{
		System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();

		stringBuilder.AppendLine("// Dynamically generated by SingletonAttribute");
		stringBuilder.AppendLine();
		stringBuilder.AppendLine("using System.Collections; ");
		stringBuilder.AppendLine("using System.Collections.Generic; ");
		stringBuilder.AppendLine("using UnityEngine; ");
		stringBuilder.AppendLine("using UnityEngine.SceneManagement; ");
		stringBuilder.AppendLine();
		stringBuilder.AppendFormat("public static class {0}", GENERATED_CLASS_NAME);
		stringBuilder.AppendLine();
		stringBuilder.AppendLine("{");

		List<string> singletons = GetListOfSingletonClasses();

		if (singletons.Count > 0)
		{
			stringBuilder.AppendLine("#if UNITY_EDITOR");
			foreach (string name in singletons)
			{
				stringBuilder.AppendFormat("\t[UnityEditor.MenuItem(\"Window/Singletons/{0}\")]", name);
				stringBuilder.AppendLine();
				stringBuilder.AppendFormat("\tpublic static void Inspect{0}()", name);
				stringBuilder.AppendLine();
				stringBuilder.AppendLine("\t{");
				stringBuilder.AppendFormat("\t\tUnityEditor.Selection.activeObject = {0}.Instance;", name);
				stringBuilder.AppendLine();
				stringBuilder.AppendLine("\t}");
			}
			stringBuilder.AppendLine("#endif");
		}
		stringBuilder.AppendLine(@"}");

		return stringBuilder.ToString();
	}

	/// <summary>
	/// Looks for [Singleton] tagged classes and returns all their names
	/// </summary>
	/// <returns>List of class' with the SingletonAttribute</returns>
	public static List<string> GetListOfSingletonClasses()
	{
		List<string> found = new List<string>();

		foreach (var domain in AppDomain.CurrentDomain.GetAssemblies())
		{
			foreach (var type in domain.GetTypes())
			{
				if (type.IsDefined(typeof(SingletonAttribute), true))
				{
					found.Add(type.Name);
				}
			}
		}

		return found;
	}
#endif
}
